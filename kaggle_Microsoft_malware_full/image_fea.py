import os
import csv
import logging
import argparse
import numpy as np


def get_feature(data_set='train', file_ext='bytes'):
    """Convert all files in given folder with given file extension to image
    formats. Store the result in a single csv file, with the file ID in the
    first column and the grayscale "pixel" features in the subsequent columns.

    Format for filename is {data_set}_{file_ext}_image.csv
    """
    files = [name for name in os.listdir(data_set) if name.endswith(file_ext)]
    logging.info('converting %d %s files to pixel features' % (
        len(files), file_ext))

    path = '%s_%s_image.csv' % (os.path.basename(data_set), file_ext)
    logging.info('saving result to %s' % path)
    with open(path, 'wb') as f:
        writer = csv.writer(f)
        writer.writerow(['Id'] + [
            '%s_%i' % (file_ext, x) for x in xrange(1000)])

        paths = ((name, os.path.join(data_set, name)) for name in files)
        rows = (np.concatenate((
                    np.array([name]),
                    read_file_as_grayscale(path).astype(str)))
                for name, path in paths)
        writer.writerows(rows)


def read_file_as_grayscale(filename, firstn=1000, width=256):
    logging.info('converting %s to grayscale' % os.path.basename(filename))
    with open(filename, 'rb') as f:
        nbytes = os.path.getsize(filename)
        rem = nbytes % width
        count = nbytes - rem
        a = np.fromfile(f, count=count, dtype=np.uint8)\
              .reshape(count / width, width)
        return np.resize(a, firstn)


def make_parser():
    parser = argparse.ArgumentParser(
        description='parse asm and byte files into img formats')
    parser.add_argument(
        '-v', '--verbose',
        type=int, default=1,
        help='enable verbose logging output; enabled by default')
    parser.add_argument(
        '-d', '--data-set-dir',
        type=str, default='train',
        help='path to directory with asm and bytes files')
    parser.add_argument(
        '-e', '--ext',
        type=str, choices=('bytes', 'asm'), default='bytes',
        help='type of file to parse img features from')
    return parser


if __name__ == '__main__':
    parser = make_parser()
    args = parser.parse_args()

    logging.basicConfig(
        level=(logging.INFO if args.verbose else logging.ERROR),
        format='[%(asctime)s]: %(message)s')

    get_feature(data_set=args.data_set_dir, file_ext=args.ext)
    logging.info('done parsing %s image features from %s' % (
        args.ext, args.data_set_dir))

